import org.gradle.internal.impldep.org.eclipse.jgit.lib.ObjectChecker.author
import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig

/*
 * This file was generated by the Gradle 'init' task.
 */

description = "client"
group = "io.brule"
version = "alpha"

val ktor_version: String by project
val api_proxy_target: String by project
val client_port: String by project

plugins {
    kotlin("js") version "1.7.10"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(kotlin("test"))
    implementation("org.jetbrains.kotlin-wrappers:kotlin-react:18.0.0-pre.332-kotlin-1.6.21")
    implementation("org.jetbrains.kotlin-wrappers:kotlin-react-dom:18.0.0-pre.332-kotlin-1.6.21")
    implementation("org.jetbrains.kotlin-wrappers:kotlin-emotion:11.9.0-pre.332-kotlin-1.6.21")
    implementation("org.jetbrains.kotlin-wrappers:kotlin-react-router-dom:6.3.0-pre.332-kotlin-1.6.21")
    implementation("org.jetbrains.kotlin-wrappers:kotlin-redux:4.1.2-pre.332-kotlin-1.6.21")
    implementation("org.jetbrains.kotlin-wrappers:kotlin-react-redux:7.2.6-pre.332-kotlin-1.6.21")
    implementation("io.ktor:ktor-client-js:$ktor_version")

    implementation(npm("react","18.2.0"))
    implementation(npm("react-dom","18.2.0"))
}

rootProject.buildDir = project(":client").buildDir


kotlin {

    js(IR) {

        buildDir = project(":client").buildDir
        binaries.executable()

        compilations["main"].packageJson {
            version = "0.0.0"
            dependencies {
                "react" to "18.2.0"
                "react-dom" to "18.2.0"
            }
        }

        for (compilation in compilations) {
          println("compilation: $compilation")
        }

        browser {
            commonWebpackConfig {
                val webPackBuildDir =
                    File(project(":client").buildDir, "webpack")
                outputPath = File(project(":client").buildDir, "dist")
                bundleAnalyzerReportDir = File(webPackBuildDir, "reports")
                reportEvaluatedConfigFile =
                    File(webPackBuildDir, "webpack.config.js")
                configDirectory = File("$projectDir/webpack.config.d")
                cssSupport.enabled = true
                devServer?.apply {
                    port = client_port.toInt()
                    proxy = mutableMapOf(
                        "/api" to api_proxy_target
                    )
                }

                distribution {
                    directory = File(project(":client").buildDir, "dist")
                }
            }
        }
    }
}

rootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> {
    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>()
        .apply {
            lockFileDirectory = project(":client").projectDir
            lockFileName = "yarn.lock"
            ignoreScripts = false
        }
}