import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig
import org.jetbrains.kotlin.gradle.targets.js.webpack.WebpackDevtool

/*
 * This file was generated by the Gradle 'init' task.
 */

description = "client"
group = "io.brule"
version = "alpha"

val ktorVersion: String by project
val api_proxy_target: String by project
val client_port: String by project
val client_port_actual = System.getenv("PORT") ?: client_port

plugins {
    kotlin("js")
    kotlin("plugin.serialization")
}
repositories {
    mavenCentral()
    mavenLocal()
}

fun kwrapper(target: String): String =
    "org.jetbrains.kotlin-wrappers:kotlin-$target-pre.413"


dependencies {
    implementation("io.brule:lib:alpha")

    testImplementation(kotlin("test"))
    implementation(kwrapper("react:18.2.0"))
    implementation(kwrapper("react-dom:18.2.0"))
    implementation(kwrapper("emotion:11.10.4"))
    implementation(kwrapper("react-router-dom:6.3.0"))
    implementation(kwrapper("redux:4.1.2"))
    implementation(kwrapper("react-redux:7.2.6"))
    implementation("io.ktor:ktor-client-js:$ktorVersion")
    implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")






    implementation(npm("react", "18.2.0"))
    implementation(npm("react-dom", "18.2.0"))
}


kotlin {

    js(IR) {

        buildDir = project(":client").buildDir
        binaries.executable()

        compilations["main"].packageJson {
            version = "0.0.0"
            dependencies {
                "react" to "18.2.0"
                "react-dom" to "18.2.0"
            }
        }


        browser {
            commonWebpackConfig {

                val wpDir = "$buildDir/webpack"
                val distDir = "$buildDir/distributions"
                val wpReportsDir = "$wpDir/reports"
                val srcResourcesDir = "$projectDir/src/main/resources"

                mode = KotlinWebpackConfig.Mode.DEVELOPMENT

                outputPath = File(distDir)

                configDirectory = File("$projectDir/webpack.config.d")
                bundleAnalyzerReportDir = File(wpReportsDir)
                reportEvaluatedConfigFile =
                    File(wpReportsDir, "webpack.config.js")
                devServer = KotlinWebpackConfig.DevServer(
                    port = client_port_actual.toInt(),
                    proxy = mutableMapOf(
                        "/api" to api_proxy_target,
                        "/api/cursors/ws/*" to mutableMapOf(
                            "target" to "ws://localhost:9001/api/cursors/ws/",
                            "ws" to true
                        )
                    ),
                    static = mutableListOf(
                        srcResourcesDir
                    )


                )
                cssSupport.enabled = true
                devtool = WebpackDevtool.EVAL_SOURCE_MAP
                showProgress = true
                sourceMaps = true
                export = true
                progressReporter = true


                distribution {
                    directory = File(distDir)
                }
            }
        }
    }
}



rootProject.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin> {
    rootProject.the<org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension>()
        .apply {
            lockFileDirectory = project(":client").projectDir
            lockFileName = "yarn.lock"
            ignoreScripts = false
        }
}
